openapi: 3.0.0

info:
  version: 1.0.0
  title: Task API
  description: The purpose of this API is for external systems to manage tasks.

servers:
  - url: /tasks-api/
    description: Task API location

tags:
  - name: Application
  - name: Projects
  - name: Tasks
  - name: Groups
  - name: Users
  - name: ApplicationConfigurations
  - name: Files

paths:
  /projects:
    get:
      description: Returns all the projects from the system that the user has access to
      tags:
        - "Projects"
      operationId: getProjects
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
        - in: query
          name: identifier
          required: false
          schema:
            type: string
        - in: query
          name: name
          required: false
          schema:
            type: string
        - in: query
          name: creationDateFrom
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
        - in: query
          name: creationDateTo
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
        - in: query
          name: createdBy
          required: false
          schema:
            type: string
      responses:
        200:
          description: Paginated Projects
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/PaginatedProjects'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: "Creates a new Project. If the configurations field is an empty array
                    then the system will provide the default configurations. If the configuration is null
                    then the system will save the project with an empty configurations."
      tags:
        - "Projects"
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        "200":
          description: A Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: Updates specific project
      tags:
        - "Projects"
      operationId: updateProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        "200":
          description: A Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          $ref: '#/components/responses/ErrorResponse'


  /projects/{identifier}:
    get:
      description: Returns specific project
      tags:
        - "Projects"
      operationId: getProject
      parameters:
        - name: identifier
          in: path
          description: identifier of the Project
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: Deletes the project logical
      tags:
        - "Projects"
      operationId: deleteProject
      parameters:
      - name: identifier
        in: path
        description: identifier of the Project
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successfully logical delete.
        default:
          $ref: '#/components/responses/ErrorResponse'


  /tasks:
    get:
      description: Returns all tasks from the system that the user has access to
      tags:
        - "Tasks"
      operationId: getTasks
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
        - in: query
          name: identifier
          required: false
          schema:
            type: string
        - in: query
          name: projectIdentifier
          required: false
          schema:
            type: string
        - in: query
          name: name
          required: false
          schema:
            type: string
        - in: query
          name: status
          required: false
          schema:
            type: string
        - in: query
          name: priority
          required: false
          schema:
            type: string
        - in: query
          name: creationDateFrom
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
        - in: query
          name: creationDateTo
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
        - in: query
          name: createdBy
          required: false
          schema:
            type: string
        - in: query
          name: assignedTo
          required: false
          schema:
            type: string
        - in: query
          name: spectator
          required: false
          schema:
            type: string
        - in: query
          name: dueDateFrom
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
        - in: query
          name: dueDateTo
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
      responses:
        200:
          description: Paginated Tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTasks'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Creates a new Task
      tags:
        - "Tasks"
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        "200":
          description: A Task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: Updates specific task
      tags:
        - "Tasks"
      operationId: updateTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        "200":
          description: A Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          $ref: '#/components/responses/ErrorResponse'


  /tasks/{identifier}:
    get:
      description: Returns a specific Task
      tags:
        - "Tasks"
      operationId: getTask
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A Task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: Deletes the task logical
      tags:
        - "Tasks"
      operationId: deleteTask
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully logical delete.
        default:
          $ref: '#/components/responses/ErrorResponse'


  /tasks/{identifier}/comments:
    get:
      description: Returns the comments of the specific Task
      tags:
        - "Tasks"
      operationId: getComments
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        200:
          description: Paginated Comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedComments'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Adds a new comment to the Task
      tags:
        - "Tasks"
      operationId: addTaskComment
      parameters:
        - name: identifier
          in: path
          description: identifier of the task
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        "200":
          description: A comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      description: Update a comment
      tags:
        - "Tasks"
      operationId: updateComment
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        "200":
          description: An updated comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        default:
          $ref: '#/components/responses/ErrorResponse'


  /tasks/{taskIdentifier}/comments/{commentIdentifier}:
    delete:
      description: Deletes the comment logical
      tags:
        - "Tasks"
      operationId: deleteComment
      parameters:
        - name: taskIdentifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - name: commentIdentifier
          in: path
          description: identifier of the Comment
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully logical delete.
        default:
          $ref: '#/components/responses/ErrorResponse'



  /tasks/{identifier}/assigns:
    get:
      description: Returns the assigns of the specific Task
      tags:
        - "Tasks"
      operationId: getAssigns
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        200:
          description: Paginated Assigns
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAssigns'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Assign user and/or group to the task
      tags:
        - "Tasks"
      operationId: addAssign
      parameters:
        - name: identifier
          in: path
          description: identifier of the task
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assign'
      responses:
        "200":
          description: The assign
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assign'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /tasks/{taskIdentifier}/assigns/{assignIdentifier}:
    delete:
      description: Deletes the assign logical
      tags:
        - "Tasks"
      operationId: deleteAssign
      parameters:
        - name: taskIdentifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - name: assignIdentifier
          in: path
          description: identifier of the assign
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully logical delete.
        default:
          $ref: '#/components/responses/ErrorResponse'



  /tasks/{identifier}/spectators:
    get:
      description: Returns the spectator of the specific Task
      tags:
        - "Tasks"
      operationId: getSpectators
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        200:
          description: Paginated spectators
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSpectators'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Adds a user and/or group as the spectator of the task
      tags:
        - "Tasks"
      operationId: addSpectator
      parameters:
        - name: identifier
          in: path
          description: identifier of the task
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spectator'
      responses:
        "200":
          description: The assign
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spectator'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /tasks/{taskIdentifier}/spectators/{spectatorIdentifier}:
    delete:
      description: Deletes the spectator logical
      tags:
        - "Tasks"
      operationId: deleteSpectator
      parameters:
        - name: taskIdentifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - name: spectatorIdentifier
          in: path
          description: identifier of the spectator
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully logical delete.
        default:
          $ref: '#/components/responses/ErrorResponse'



  /tasks/{identifier}/history:
    get:
      description: Returns the changes that took place in the specific Task
      tags:
        - "Tasks"
      operationId: getHistory
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
        - in: query
          name: identifier
          required: false
          schema:
            type: string
        - in: query
          name: newHashCode
          required: false
          schema:
            type: string
        - in: query
          name: changedBy
          required: false
          schema:
            type: string
      responses:
        200:
          description: Paginated history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHistory'



  /groups:
    get:
      description: |
        These are the groups that exist in the API.
        With groups, we can assign a task to the users that belonging to this group.
        Returns all groups from the system that the user has access to.
      tags:
        - Groups
      operationId: getGroups
      parameters:
        - in: query
          name: name
          required: false
          schema:
            type: string
      responses:
        "200":
          description: groups.
          content:
            application/json:
              schema:
                items:
                  type: string
        default:
          $ref: '#/components/responses/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      operationId: getUsers
      parameters:
        - in: query
          name: name
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Users
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/ErrorResponse'


  /applicationConfigurations:
    get:
      description: Returns the application configurations that are not for a specific Project.
      tags:
        - ApplicationConfigurations
      operationId: getApplicationConfigurations
      responses:
        "200":
          description: Application Configurations
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationConfiguration'
        default:
          $ref: '#/components/responses/ErrorResponse'



  /file:
    post:
      description: Uploads the content of the file in the servers file system
      tags:
        - Files
      operationId: upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                createdBy:
                  type: string
                description:
                  description: This is the description of the attachment
                  type: string
                fileContent:
                  type: string
                  format: binary
      responses:
        "200":
          description: Returns the attachment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        default:
          $ref: '#/components/responses/ErrorResponse'



  /file/{identifier}:
    get:
      description: Returns the file content of the specific attachment.
      tags:
        - Files
      operationId: getFileContent
      parameters:
        - name: identifier
          in: path
          description: identifier of the attachement
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The file content of the specific attachment.
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                format: binary
        default:
          $ref: '#/components/responses/ErrorResponse'


components:
  schemas:
    PaginatedAssigns:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Assign'
      allOf:
        - $ref: '#/components/schemas/Page'

    PaginatedComments:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Comment'
      allOf:
        - $ref: '#/components/schemas/Page'

    PaginatedHistory:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/History'
      allOf:
        - $ref: '#/components/schemas/Page'

    PaginatedProjects:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Project'
      allOf:
        - $ref: '#/components/schemas/Page'

    PaginatedSpectators:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Spectator'
      allOf:
        - $ref: '#/components/schemas/Page'

    PaginatedTasks:
      properties:
        content:
          items:
            $ref: '#/components/schemas/Task'
      allOf:
        - $ref: '#/components/schemas/Page'

    Page:
      type: object
      properties:
        totalElements:
          type: integer
          example: 1

    Project:
     type: object
     required:
       - name
     properties:
       identifier:
         type: string
         description: Returned by GET, not used in POST/PUT/PATCH
       name:
         description: This is the name of the project
         type: string
       description:
         description: This is the description of the project
         type: string
       prefixIdentifier:
         description: The prefix part that every identifier haves. For example, if the prefix is <my-project> then the identifier will be <my-project-number>
         type: string
       createdAt:
         type: string
         pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
         description: Creation date and time
         example: "2021-01-30T08:30:00Z"
         readOnly: true
       createdBy:
         type: string
         readOnly: true
       applicationUser:
         type: string
         description: This field is the applicationUser from the IDP
         example: Application1
         readOnly: true
       configurations:
         description: These are the configurations of the project
         items:
           $ref: '#/components/schemas/ApplicationConfiguration'

    ApplicationConfiguration:
        type: object
        required:
          - configurationName
          - configurationValue
        properties:
          configurationName:
            description: This is the name of the configuration
            type: string
          configurationLabel:
            description: This is the label of the configuration
            type: string
          configurationValue:
            description: This is the value of the configuration
            type: string
          description:
            description: This is the description of the configuration
            type: string
          color:
            description: The UI may need to show the color of the configuration. The values that we can provide are in this format #40CB3BFF.
            type: string
          icon:
            description: The UI may need to show an icon for the configuration. The value can be a URI of the icon.
            type: string
          weight:
            description: This field is used for sorting
            type: integer
          createdAt:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
            description: Creation date and time
            example: "2021-01-30T08:30:00Z"
            readOnly: true
          updatedAt:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
            description: Creation date and time
            example: "2021-01-30T08:30:00Z"
            readOnly: true

    Task:
      type: object
      required:
        - name
      properties:
        identifier:
          type: string
          description: Returned by GET, not used in POST/PUT/PATCH
        name:
          description: This is the name of the task
          type: string
        description:
          description: This is the description of the task
          type: string
        status:
          description: This is the current status of the task
          type: string
        label:
          description: This is the label of the task
          type: string
        priority:
          description: This is the priority of the task
          type: string
        createdAt:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
          readOnly: true
        createdBy:
          type: string
        projectIdentifier:
          type: string
        applicationUser:
          type: string
          description: This field is the applicationUser from the IDP
          example: Application1
          readOnly: true
        dueDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Expiration Date of Task
          example: "2021-01-30T08:30:00Z"
        comments_url:
          readOnly: true
          type: string
          format: url
          example: "{protocol}//{server-base-url}/tasks/{identifier}/comments"
        assigns:
          items:
            $ref: '#/components/schemas/Assign'
          maxItems: 10
        spectators:
          items:
            $ref: '#/components/schemas/Spectator'
          maxItems: 10

    Comment:
      description: This is a comment object that belongs to a Task
      type: object
      required:
        - text
      properties:
        identifier:
          type: string
          format: uuid
        text:
          description: This is the text of the comment
          type: string
        createdBy:
          type: string
        attachments:
          description: These are the attachments of the comment
          items:
            $ref: '#/components/schemas/Attachment'
        createdAt:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
          readOnly: true
        updatedAt:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Update timestamp
          example: "2021-01-30T08:30:00Z"
          readOnly: true

    Assign:
      description: A task can be assigned to users or groups.
      type: object
      properties:
        identifier:
          type: string
          format: uuid
          readOnly: true
        group:
          type: string
        user:
          type: string
        assignDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          example: "2021-01-30T08:30:00Z"
          readOnly: true


    AttachmentFormData:
      format: binary
      type: object
      properties:
        createdBy:
          type: string
        description:
          description: This is the description of the attachment
          type: string
        fileContent:
          type: string
          format: binary

    Attachment:
      type: object
      properties:
        identifier:
          type: string
          format: uuid
        name:
          description: This is the name of the attachment
          type: string
        mimeType:
          description: This is the mime type of the attachment
          type: string
        description:
          description: This is the description of the attachment
          type: string
        createdBy:
          type: string
        uploadedAt:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
          readOnly: true

    Spectator:
      description: |
        This is an object that shows the spectators of the Task. By default, the system is going to add as a spectator the user that creates the task.
      type: object
      properties:
        identifier:
          type: string
          format: uuid
          readOnly: true
        group:
          type: string
        user:
          type: string
        createdAt:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          example: "2021-01-30T08:30:00Z"
          readOnly: true

    User:
      description: This is a user object
      type: object
      required:
        - name
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        groups:
          items:
            type: string

    History:
      description: This is the history object. This object describes the changes that happens to a specific object
      type: object
      properties:
        hashcode:
          type: string
          description: This is the hash code that an object has
          readOnly: true
        typeOfObject:
          type: string
          description: This is the type of Object
        field:
          description: This indicates the field in which the value has changed
        oldValue:
          type: string
        newValue:
          type: string
        changedBy:
          type: string
          description: The user that makes an action to an object
        timestampOfChange:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          readOnly: true
        action:
          description: The action that modifies the state of the object
          type: string
          enum:
            - update
            - delete

    Error:
      type: object
      properties:
        status:
          type: string
          enum:
            - fail
            - error
          description: |
            The fail status indicating that there was a problem with the data submitted or some
            pre-condition on API call was not satisfied.
            The error status indicating that an error occurred in processing the request, i.e. Exception
            was thrown
        errorCode:
          type: string
          example: 001
        httpStatus:
          type: string
          example: 400
        translateKey:
          type: string
          example: taskApi.task-not-found
        message:
          type: string
          example: Task not found
        timestamp:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
          readOnly: true

    Pageable:
      description: minimal Pageable query parameters
      type: object
      properties:
        page:
          type: integer
          description: Results page you want to retrieve (0..N)
        size:
          type: integer
          description: Number of records per page
        sort:
          description: Sorting criteria in the format -> property,asc|desc no space after comma!.
          example: createdAt,asc
          type: string

  responses:
    ErrorResponse:
      description: Error payload
      content:
        application/json:
          schema:
            properties:
              errors:
                items:
                  $ref: '#/components/schemas/Error'




