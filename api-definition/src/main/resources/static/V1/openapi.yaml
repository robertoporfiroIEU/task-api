openapi: 3.0.0

info:
  version: 1.0.0
  title: Task API
  description: The purpose of this API is for external systems to manage tasks.

servers:
  - url: http://localhost:8080
    description: Task API location

tags:
  - name: Tasks
  - name: Groups

paths:
  /tasks:
    get:
      description: Returns all tasks from the system that the user has access to
      tags:
        - "Tasks"
      operationId: getTasks
      x-paginated-object:
        - gr.rk.tasks.V1.models.Task
      responses:
        200:
          description: Paginated Tasks
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Page'
                properties:
                  content:
                    items:
                      $ref: '#/components/schemas/Task'
        default:
          $ref: '#/components/responses/ErrorResponse'


  /tasks/{identifier}:
    get:
      description: Return specific Task
      tags:
        - "Tasks"
      operationId: getTaskDetail
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A Task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetail'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /tasks/{identifier}/comments:
    post:
      description: Add a new comment to the Task
      tags:
        - "Tasks"
      operationId: addTaskComment
      parameters:
        - name: identifier
          in: path
          description: identifier of the task
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        "200":
          description: A comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /tasks/{identifier}/assigns:
    post:
      description: Assign users and groups to the task
      tags:
        - "Tasks"
      operationId: addAssign
      parameters:
        - name: identifier
          in: path
          description: identifier of the task
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assign'
      responses:
        "200":
          description: The assign
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assign'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /groups:
    get:
      description: |
        These are the groups that exist in the API.
        With groups, we can assign a task to the users that belonging to this group.
        Returns all groups from the system that the user has access to.
      tags:
        - Groups
      operationId: getGroups
      x-paginated-object:
        - gr.rk.tasks.V1.models.Task
      responses:
        "200":
          description: Paginated groups.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Page'
                properties:
                  items:
                    $ref: '#/components/schemas/Group'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /groups/{name}:
    get:
      description: Return specific group
      tags:
        - Groups
      operationId: getGroupDetail
      parameters:
        - name: name
          in: path
          description: identifier of the Group
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDetail'
        default:
          $ref: '#/components/responses/ErrorResponse'


components:
  schemas:
    Page:
      type: object
      properties:
        pageable:
          type: string
          example: INSTANCE
        last:
          type: boolean
        totalPages:
          type: integer
          example: 1
        totalElements:
          type: integer
          example: 5
        size:
          type: integer
          example: 10
        number:
          type: integer
          example: 0
        sort:
          type: object
          properties:
            sorted:
              type: boolean
              example: false
            unsorted:
              type: boolean
            empty:
                type: boolean
        first:
          type: boolean
        numberOfElements:
          type: integer
          example: 5
        empty:
          type: boolean
          example: false

    Task:
      description: This is a task object
      type: object
      discriminator:
        propertyName: identifier
      required:
        - name
        - status
      properties:
        identifier:
          type: string
          format: uuid
          description: Returned by GET, not used in POST/PUT/PATCH
          readOnly: true
        name:
          description: This is the name of the task
          type: string
        description:
          description: This is the description of the task
          type: string
        status:
          description: This is the current status of the task
          type: string
        creationDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
          readOnly: true
        createdBy:
          $ref: '#/components/schemas/User'
        realm:
          type: string
          description: This field is the realm from the IDP
          example: Application1
          readOnly: true
        dueDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Expiration Date of Task
          example: "2021-01-30T08:30:00Z"

    TaskDetail:
      allOf: # Combines the Task and the inline model
        - $ref: '#/components/schemas/Task'
      type: object
      properties:
        comments:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        assigns:
          type: array
          items:
            $ref: '#/components/schemas/Assign'
        spectators:
          type: array
          items:
            $ref: '#/components/schemas/Spectator'

    Comment:
      description: This is a comment object that belongs to a Task
      type: object
      required:
        - text
      properties:
        identifier:
          type: string
          format: uuid
          description: Returned by GET, not used in POST/PUT/PATCH
          readOnly: true
        text:
          description: This is the text of the comment
          type: string
        createdBy:
          $ref: '#/components/schemas/User'
        creationDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
          readOnly: true

    Assign:
      description: A task can be assigned to users or groups.
      type: object
      properties:
        group:
          $ref: '#/components/schemas/Group'
        users:
          $ref: '#/components/schemas/User'
        assignDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          example: "2021-01-30T08:30:00Z"
          readOnly: true

    Spectator:
      description: |
        This is an object that shows the spectators of the Task. By default, the system is going to add as a spectator the the user that creates the task.
      type: object
      properties:
        group:
          $ref: '#/components/schemas/Group'
        users:
          $ref: '#/components/schemas/User'
        creationDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          example: "2021-01-30T08:30:00Z"
          readOnly: true

    Group:
      description: This is a group that a user belongs to
      type: object
      required:
        - name
      properties:
        name:
          type: string

    GroupDetail:
      allOf: # Combines the Group and the inline model
        - $ref: '#/components/schemas/Group'
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        realm:
          type: string
          description: This field is the realm from the IDP
          example: Application1
          readOnly: true
        creationDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
          readOnly: true
        groups:
          type: array
          items:
            $ref: '#/components/schemas/User'

    User:
      description: This is a user object that is coming from IDP
      type: object
      properties:
        name:
          type: string

    Error:
      type: object
      properties:
        status:
          type: string
          enum:
            - fail
            - error
          description: |
            The fail status indicating that there was a problem with the data submitted or some
            pre-condition on API call was not satisfied.
            The error status indicating that an error occurred in processing the request, i.e. Exception
            was thrown
        message:
          type: string

  responses:
    ErrorResponse:
      description: Error payload
      content:
        application/json:
          schema:
            properties:
              errors:
                items:
                  $ref: '#/components/schemas/Error'


