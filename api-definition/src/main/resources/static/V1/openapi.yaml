openapi: 3.0.0

info:
  version: 1.0.0
  title: Task API
  description: The purpose of this API is for external systems to manage tasks.

servers:
  - url: http://localhost:8080
    description: Task API location

tags:
  - name: Projects
  - name: Tasks
  - name: Groups
  - name: Users

paths:
  /projects:
    get:
      description: Returns all the projects from the system that the user has access to
      tags:
        - "Projects"
      operationId: getProjects
      x-paginated-object:
        - gr.rk.tasks.V1.dto.ProjectDTO
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
        - in: query
          name: identifier
          required: false
          schema:
            type: string
        - in: query
          name: name
          required: false
          schema:
            type: string
        - in: query
          name: creationDateFrom
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
        - in: query
          name: creationDateTo
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
        - in: query
          name: createdBy
          required: false
          schema:
            type: string
      responses:
        200:
          description: Paginated Projects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Page'
                properties:
                  content:
                    items:
                      $ref: '#/components/schemas/Project'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Create a new Project
      tags:
        - "Projects"
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        "200":
          description: A Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          $ref: '#/components/responses/ErrorResponse'


  /projects/{identifier}:
    get:
      description: Return specific project
      tags:
        - "Projects"
      operationId: getProject
      parameters:
        - name: identifier
          in: path
          description: identifier of the Project
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: Delete the project logical
      tags:
        - "Projects"
      operationId: deleteProject
      parameters:
      - name: identifier
        in: path
        description: identifier of the Project
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successfully logical delete.
        default:
          $ref: '#/components/responses/ErrorResponse'


  /tasks:
    get:
      description: Returns all tasks from the system that the user has access to
      tags:
        - "Tasks"
      operationId: getTasks
      x-paginated-object:
        - gr.rk.tasks.V1.dto.TaskDTO
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
        - in: query
          name: identifier
          required: false
          schema:
            type: string
        - in: query
          name: projectIdentifier
          required: false
          schema:
            type: string
        - in: query
          name: name
          required: false
          schema:
            type: string
        - in: query
          name: status
          required: false
          schema:
            type: string
        - in: query
          name: creationDateFrom
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
        - in: query
          name: creationDateTo
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
        - in: query
          name: createdBy
          required: false
          schema:
            type: string
        - in: query
          name: dueDateFrom
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
        - in: query
          name: dueDateTo
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
      responses:
        200:
          description: Paginated Tasks
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Page'
                properties:
                  content:
                    items:
                      $ref: '#/components/schemas/Task'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Create a new Task
      tags:
        - "Tasks"
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        "200":
          description: A Task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          $ref: '#/components/responses/ErrorResponse'



  /tasks/{identifier}:
    get:
      description: Return specific Task
      tags:
        - "Tasks"
      operationId: getTask
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A Task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: Delete the task logical
      tags:
        - "Tasks"
      operationId: deleteTask
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully logical delete.
        default:
          $ref: '#/components/responses/ErrorResponse'


  /tasks/{identifier}/comments:
    get:
      description: Returns the comments of the specific Task
      tags:
        - "Tasks"
      operationId: getComments
      x-paginated-object:
        - gr.rk.tasks.V1.dto.CommentDTO
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        200:
          description: Paginated Comments
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Page'
                properties:
                  content:
                    items:
                      $ref: '#/components/schemas/Comment'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Add a new comment to the Task
      tags:
        - "Tasks"
      operationId: addTaskComment
      parameters:
        - name: identifier
          in: path
          description: identifier of the task
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        "200":
          description: A comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /tasks/{taskIdentifier}/comments/{commentIdentifier}:
    delete:
      description: Delete the comment logical
      tags:
        - "Tasks"
      operationId: deleteComment
      parameters:
        - name: taskIdentifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - name: commentIdentifier
          in: path
          description: identifier of the Comment
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully logical delete.
        default:
          $ref: '#/components/responses/ErrorResponse'



  /tasks/{identifier}/assigns:
    get:
      description: Returns the assigns of the specific Task
      tags:
        - "Tasks"
      operationId: getAssigns
      x-paginated-object:
        - gr.rk.tasks.V1.dto.AssignDTO
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        200:
          description: Paginated Assigns
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Page'
                properties:
                  content:
                    items:
                      $ref: '#/components/schemas/Assign'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Assign user and/or group to the task
      tags:
        - "Tasks"
      operationId: addAssign
      parameters:
        - name: identifier
          in: path
          description: identifier of the task
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assign'
      responses:
        "200":
          description: The assign
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assign'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /tasks/{taskIdentifier}/assigns/{assignIdentifier}:
    delete:
      description: Delete the assign logical
      tags:
        - "Tasks"
      operationId: deleteAssign
      parameters:
        - name: taskIdentifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - name: assignIdentifier
          in: path
          description: identifier of the assign
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully logical delete.
        default:
          $ref: '#/components/responses/ErrorResponse'



  /tasks/{identifier}/spectators:
    get:
      description: Returns the spectator of the specific Task
      tags:
        - "Tasks"
      operationId: getSpectators
      x-paginated-object:
        - gr.rk.tasks.V1.dto.SpectatorDTO
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        200:
          description: Paginated spectators
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Page'
                properties:
                  content:
                    items:
                      $ref: '#/components/schemas/Spectator'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Adding user and/or group as the spectator of the task
      tags:
        - "Tasks"
      operationId: addSpectator
      parameters:
        - name: identifier
          in: path
          description: identifier of the task
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spectator'
      responses:
        "200":
          description: The assign
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spectator'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /tasks/{taskIdentifier}/spectators/{spectatorIdentifier}:
    delete:
      description: Delete the spectator logical
      tags:
        - "Tasks"
      operationId: deleteSpectator
      parameters:
        - name: taskIdentifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - name: spectatorIdentifier
          in: path
          description: identifier of the spectator
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully logical delete.
        default:
          $ref: '#/components/responses/ErrorResponse'



  /tasks/{identifier}/history:
    get:
      description: Returns the changes that took place in the specific Task
      tags:
        - "Tasks"
      operationId: getHistory
      x-paginated-object:
        - gr.rk.tasks.V1.dto.TaskDTO
      parameters:
        - name: identifier
          in: path
          description: identifier of the Task
          required: true
          schema:
            type: string
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
        - in: query
          name: identifier
          required: false
          schema:
            type: string
        - in: query
          name: newHashCode
          required: false
          schema:
            type: string
        - in: query
          name: changedBy
          required: false
          schema:
            type: string
      responses:
        200:
          description: Paginated history
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Page'
                properties:
                  content:
                    items:
                      $ref: '#/components/schemas/History'



  /groups:
    get:
      description: |
        These are the groups that exist in the API.
        With groups, we can assign a task to the users that belonging to this group.
        Returns all groups from the system that the user has access to.
      tags:
        - Groups
      operationId: getGroups
      x-paginated-object:
        - gr.rk.tasks.V1.dto.GroupDTO
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
        - in: query
          name: name
          required: false
          schema:
            type: string
        - in: query
          name: creationDateFrom
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
        - in: query
          name: creationDateTo
          required: false
          schema:
            type: string
            pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
      responses:
        "200":
          description: Paginated groups.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Page'
                properties:
                  items:
                    $ref: '#/components/schemas/Group'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Create a group
      tags:
        - Groups
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        "200":
          description: A Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /groups/{name}:
    get:
      description: Return specific group
      tags:
        - Groups
      operationId: getGroup
      parameters:
        - name: name
          in: path
          description: name of the Group
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: Delete the group logical
      tags:
        - "Groups"
      operationId: deleteGroup
      parameters:
        - name: name
          in: path
          description: name of the Group
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully logical delete.
        default:
          $ref: '#/components/responses/ErrorResponse'




  /groups/{name}/users:
    post:
      description: Return the specific group with the new user inside
      tags:
        - Groups
      operationId: addUserToGroup
      parameters:
        - name: name
          in: path
          description: name of the Group
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: A Group with the User list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          $ref: '#/components/responses/ErrorResponse'


  /groups/{groupName}/users/{username}:
    delete:
      description: Delete the user from the group logical
      tags:
        - "Groups"
      operationId: deleteUserFromGroup
      parameters:
        - name: groupName
          in: path
          description: name of the Group
          required: true
          schema:
            type: string
        - name: username
          in: path
          description: name of the User
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully logical delete.
        default:
          $ref: '#/components/responses/ErrorResponse'


  /users:
    get:
      description: |
        These are the users that exist in the API
      tags:
        - Users
      operationId: getUsers
      x-paginated-object:
        - gr.rk.tasks.V1.dto.UserDTO
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
        - in: query
          name: name
          required: false
          schema:
            type: string
        - in: query
          name: email
          required: false
          schema:
            type: string
            format: 'email'
      responses:
        "200":
          description: Paginated users.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Page'
                properties:
                  items:
                    $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      description: Create a new User
      tags:
        - Users
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: A User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /users/{name}:
    get:
      description: Return specific user
      tags:
        - Users
      operationId: getUser
      parameters:
        - name: name
          in: path
          description: identifier of the user
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: Delete the user logical
      tags:
        - "Users"
      operationId: deleteUser
      parameters:
        - name: name
          in: path
          description: identifier of the user
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully logical delete.
        default:
          $ref: '#/components/responses/ErrorResponse'


components:
  schemas:
    Page:
      type: object
      properties:
        pageable:
          type: string
          example: INSTANCE
        last:
          type: boolean
        totalPages:
          type: integer
          example: 1
        totalElements:
          type: integer
          example: 5
        size:
          type: integer
          example: 10
        number:
          type: integer
          example: 0
        sort:
          type: object
          properties:
            sorted:
              type: boolean
              example: false
            unsorted:
              type: boolean
            empty:
                type: boolean
        first:
          type: boolean
        numberOfElements:
          type: integer
          example: 5
        empty:
          type: boolean
          example: false

    Project:
     type: object
     required:
       - name
       - createdBy
     properties:
       identifier:
         type: string
         description: Returned by GET, not used in POST/PUT/PATCH
         readOnly: true
       name:
         description: This is the name of the project
         type: string
       description:
         description: This is the description of the project
         type: string
       prefixIdentifier:
         description: The prefix part that every identifier haves. For example, if the prefix is <my-project> then the identifier will be <my-project-number>
         type: string
       creationDate:
         type: string
         pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
         description: Creation date and time
         example: "2021-01-30T08:30:00Z"
         readOnly: true
       createdBy:
         $ref: '#/components/schemas/User'
       realm:
         type: string
         description: This field is the realm from the IDP
         example: Application1
         readOnly: true


    Task:
      type: object
      required:
        - name
        - createdBy
      properties:
        identifier:
          type: string
          description: Returned by GET, not used in POST/PUT/PATCH
          readOnly: true
        name:
          description: This is the name of the task
          type: string
        description:
          description: This is the description of the task
          type: string
        status:
          description: This is the current status of the task
          type: string
        creationDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
          readOnly: true
        createdBy:
          $ref: '#/components/schemas/User'
        projectIdentifier:
          type: string
        realm:
          type: string
          description: This field is the realm from the IDP
          example: Application1
          readOnly: true
        dueDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Expiration Date of Task
          example: "2021-01-30T08:30:00Z"
        comments_url:
          readOnly: true
          type: string
          format: url
          example: "{protocol}//{server-base-url}/tasks/{identifier}/comments"
        assigns_url:
          readOnly: true
          type: string
          format: url
          example: "{protocol}//{server-base-url}/tasks/{identifier}/assigns"
        spectators_url:
          readOnly: true
          type: string
          format: url
          example: "{protocol}//{server-base-url}/tasks/{identifier}/spectators"

    Comment:
      description: This is a comment object that belongs to a Task
      type: object
      required:
        - text
        - createdBy
      properties:
        identifier:
          type: string
          format: uuid
          readOnly: true
        text:
          description: This is the text of the comment
          type: string
        createdBy:
          $ref: '#/components/schemas/User'
        creationDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
          readOnly: true

    Assign:
      description: A task can be assigned to users or groups.
      type: object
      properties:
        identifier:
          type: string
          format: uuid
          readOnly: true
        group:
          $ref: '#/components/schemas/Group'
        user:
          $ref: '#/components/schemas/User'
        assignDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          example: "2021-01-30T08:30:00Z"
          readOnly: true

    Spectator:
      description: |
        This is an object that shows the spectators of the Task. By default, the system is going to add as a spectator the user that creates the task.
      type: object
      properties:
        identifier:
          type: string
          format: uuid
          readOnly: true
        group:
          $ref: '#/components/schemas/Group'
        user:
          $ref: '#/components/schemas/User'
        creationDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          example: "2021-01-30T08:30:00Z"
          readOnly: true

    Group:
      description: This is a group that a user belongs to
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        realm:
          type: string
          description: This field is the realm from the IDP
          example: Application1
          readOnly: true
        creationDate:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
          readOnly: true
        users:
          readOnly: true
          items:
            $ref: '#/components/schemas/User'


    User:
      description: This is a user object
      type: object
      required:
        - name
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        groups:
          readOnly: true
          items:
            $ref: "#/components/schemas/Group"


    History:
      description: This is the history object. This object describes the changes that happens to a specific object
      properties:
        hashcode:
          type: string
          description: This is the hash code that an object has
          readOnly: true
        typeOfObject:
          type: string
          description: This is the type of Object
        field:
          description: This indicates the field in which the value has changed
        oldValue:
          type: string
        newValue:
          type: string
        changedBy:
          type: string
          description: The user that makes an action to an object
        timestampOfChange:
          type: string
          pattern: '^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))$'
          readOnly: true
        action:
          description: The action that modifies the state of the object
          type: string
          enum:
            - update
            - delete

    Error:
      type: object
      properties:
        status:
          type: string
          enum:
            - fail
            - error
          description: |
            The fail status indicating that there was a problem with the data submitted or some
            pre-condition on API call was not satisfied.
            The error status indicating that an error occurred in processing the request, i.e. Exception
            was thrown
        message:
          type: string

    Pageable:
      description: minimal Pageable query parameters
      type: object
      properties:
        page:
          type: integer
          description: Results page you want to retrieve (0..N)
        size:
          type: integer
          description: Number of records per page
        sort:
          description: Sorting criteria in the format -> property,asc|desc no space after comma!.
          example: id,asc
          type: string


  responses:
    ErrorResponse:
      description: Error payload
      content:
        application/json:
          schema:
            properties:
              errors:
                items:
                  $ref: '#/components/schemas/Error'




